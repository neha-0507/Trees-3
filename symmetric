#Time Complexity=o(n)
#Space Complexity=o(n)
#Does this code successfully run on leetcode=Yes


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if root is None:
            return True
        return self.mirror(root.left,root.right)
    def mirror(self,left,right):
        if left==None and right==None:
            return True
        if left==None or right==None:
            return False
        if left.val!=right.val:
            return False
        a=self.mirror(left.left,right.right)
        b=self.mirror(left.right,right.left)
        return a and b
        
